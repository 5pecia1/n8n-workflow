{
  "name": "Notion, Calendar Sync",
  "nodes": [
    {
      "parameters": {},
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        40,
        640
      ]
    },
    {
      "parameters": {},
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 1,
      "position": [
        750,
        730
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "getAll",
        "databaseId": "3e5fa45b-1ced-42de-9344-441cbe033079",
        "returnAll": true,
        "simple": false,
        "options": {
          "sort": {
            "sortValue": [
              {
                "timestamp": true,
                "key": "last_edited_time",
                "direction": "descending"
              }
            ]
          }
        }
      },
      "name": "Get Notion ",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        400,
        830
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "functionCode": "return [{json:{\"calendar\": items.map(i => i.json)}}];\n"
      },
      "name": "Map ",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        550,
        640
      ]
    },
    {
      "parameters": {
        "functionCode": "return [{json:{\"notion\": items.map(i => i.json)}}];\n"
      },
      "name": "Map",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        550,
        830
      ]
    },
    {
      "parameters": {
        "functionCode": "(()=>{\"use strict\";var e={924:(e,t)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.DEFAULT_RANGE=t.TIME_ZONE=t.NOTION_DATE_PROPERTY_NAME=t.NOTION_GCAL_ID_PROPERTY_NAME=t.ADDED_TO_NOTION_MARK=t.ADD_TO_NOTION_MARK=t.ONE_DAY_UNIX_TIME=void 0;const n=$node[\"Set Environments\"].parameter.values.string,a=$node[\"Set Environments\"].parameter.values.number,r={string:n.reduce(((e,{name:t,value:n})=>Object.assign(e,{[t]:n})),{}),number:a.reduce(((e,{name:t,value:n})=>Object.assign(e,{[t]:n})),{})};$node[\"Set Environments\"].parameter.values,t.ONE_DAY_UNIX_TIME=864e5,t.ADD_TO_NOTION_MARK=r.string[\"add to notion mark in gcal\"].split(\",\"),t.ADDED_TO_NOTION_MARK=r.string[\"notion mark in gcal\"],t.NOTION_GCAL_ID_PROPERTY_NAME=r.string[\"gcal id property in notion\"],t.NOTION_DATE_PROPERTY_NAME=r.string[\"notion date property\"],t.TIME_ZONE=r.string[\"time zone\"]||\"Asia/Seoul\",t.DEFAULT_RANGE=60*(r.number[\"default calendar range(min)\"]||30)*1e3},825:(e,t,n)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.makeEventState=void 0;const a=n(924),r=n(103);t.makeEventState=function(e){const t=e.start.dateTime||e.start.date,n=e.end.dateTime||e.end.date,i=Date.parse(t.includes(\"T\")?t:t+`T00:00:00${r.getTimeZone()}`),o=Date.parse(n.includes(\"T\")?n:n+`T00:00:00${r.getTimeZone()}`),s=!!e.start.date;return{eventStart:i,eventEnd:o,isEventAllDay:s,isEventOneDayAllDay:s&&o-i===a.ONE_DAY_UNIX_TIME}}},207:(e,t,n)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.getNotionNameProperty=t.getNotionGCalIdProperty=t.getNotionDateProperty=t.makePageState=void 0;const a=n(924),r=n(103);function i(e){return e.properties[a.NOTION_DATE_PROPERTY_NAME]}t.makePageState=function(e){const t=i(e).date.start,n=i(e).date.end?i(e).date.end:null,a=Date.parse(t.includes(\"T\")?t:t+`T00:00:00${r.getTimeZone()}`),o=n?Date.parse(n.includes(\"T\")?n:n+`T00:00:00${r.getTimeZone()}`):null,s=!t.includes(\"T\");return{pageStart:a,pageEnd:o,isPageAllDay:s,isPageOneDayAllDAy:s&&null===o}},t.getNotionDateProperty=i,t.getNotionGCalIdProperty=function(e){return e.properties[a.NOTION_GCAL_ID_PROPERTY_NAME]},t.getNotionNameProperty=function(e){return e.properties.Name}},103:(e,t,n)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.makeIso8601WithTZ=t.getTimeZone=t.getTImeZoneOffset=void 0;const a=n(924);function r(){const e=Intl.DateTimeFormat([],{timeZone:a.TIME_ZONE,timeZoneName:\"short\"}).format(new Date).split(\" \")[1].slice(3);let t=60*parseInt(e.split(\":\")[0]);return e.includes(\":\")&&(t+=parseInt(e.split(\":\")[1])),t}function i(){const e=r();let t=Math.abs(e/60),n=Math.abs(e%60),a=\"Z\";return t<10&&(t=\"0\"+t),n<10&&(n=\"0\"+n),e>0?a=\"+\"+t+\":\"+n:e<0&&(a=\"-\"+t+\":\"+n),a}t.getTImeZoneOffset=r,t.getTimeZone=i,t.makeIso8601WithTZ=function(e){const t=r();t>0?e+=60*Math.abs(t)*1e3:t<0&&(e-=60*Math.abs(t)*1e3);const n=new Date(e).toISOString();return n.substring(0,n.length-5)+i()}},147:(e,t,n)=>{Object.defineProperty(t,\"__esModule\",{value:!0}),t.makeCalendarEventDate=t.makeNotionPageDate=t.makeEventDescription=t.makePageId=void 0;const a=n(924),r=n(825),i=n(207),o=n(103);t.makePageId=function(e){const t=e.description;let n;return n=t.includes(\"\\n\")?t.substring(0,t.indexOf(\"\\n\")):t.substring(0,t.indexOf(\"<br>\")),n.substring(a.ADDED_TO_NOTION_MARK.length)},t.makeEventDescription=function(e){return`${a.ADDED_TO_NOTION_MARK}${e.id}\\nhttps://notion.so/${e.id.replace(/-/g,\"\")}\\n`},t.makeNotionPageDate=function(e){const{eventStart:t,eventEnd:n,isEventAllDay:i,isEventOneDayAllDay:s}=r.makeEventState(e),_=o.makeIso8601WithTZ(t),d=s?null:o.makeIso8601WithTZ(i?n-a.ONE_DAY_UNIX_TIME:n);return{is_all_day:i,timezone:a.TIME_ZONE,start:i?_.substring(0,_.indexOf(\"T\")):_,end:null==d?null:i?d.substring(0,d.indexOf(\"T\")):d}},t.makeCalendarEventDate=function(e){const{pageStart:t,pageEnd:n,isPageAllDay:r}=i.makePageState(e),s=o.makeIso8601WithTZ(t),_=r?o.makeIso8601WithTZ((n||t)+a.ONE_DAY_UNIX_TIME):o.makeIso8601WithTZ(n||t+a.DEFAULT_RANGE);return{date:{start:r?s.substring(0,s.indexOf(\"T\")):s,end:r?_.substring(0,_.indexOf(\"T\")):_,is_all_day:r,timezone:a.TIME_ZONE}}}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var i=t[a]={exports:{}};return e[a](i,i.exports,n),i.exports}var a={};for(var r in(()=>{var e=a;Object.defineProperty(e,\"__esModule\",{value:!0}),e.main=void 0;const t=n(924),r=n(207),i=n(825),o=n(147);e.main=function(e){let n=e[0].json.calendar,a=e[1].json.notion;Object.keys(n[0]).length||(n=[]),Object.keys(a[0]).length||(a=[]);const s={create_events:[],create_pages:[],delete_events:[],delete_pages:[],update_events:[],update_pages:[]},_=a.filter((e=>e.properties&&e.properties[t.NOTION_DATE_PROPERTY_NAME])),d=[],l=new Map;n.forEach((e=>{for(const n of t.ADD_TO_NOTION_MARK)if(e.summary&&e.summary.startsWith(n)){d.push(e),e.summary=e.summary.substring(n.length);break}e.description&&e.description.startsWith(t.ADDED_TO_NOTION_MARK)&&l.set(e.id,e)}));for(const e of _){const{pageStart:n,pageEnd:a,isPageOneDayAllDAy:_}=r.makePageState(e),d=r.getNotionGCalIdProperty(e).rich_text[0];if(d){const u=d.plain_text,p=l.get(u);if(p){const{eventStart:d,eventEnd:m,isEventOneDayAllDay:O}=i.makeEventState(p),c=o.makePageId(p);if(l.delete(u),n==d&&(_&&O||!_&&a==m||null==a&&!_&&n+t.DEFAULT_RANGE==m));else if(Date.parse(e.last_edited_time)>Date.parse(p.updated)){const t=r.getNotionNameProperty(e).title[0]?r.getNotionNameProperty(e).title[0].text.content:\"\";s.update_events.push(Object.assign({id:r.getNotionGCalIdProperty(e).rich_text[0].plain_text,summary:t},o.makeCalendarEventDate(e)))}else s.update_pages.push({id:c,date_property_name:t.NOTION_DATE_PROPERTY_NAME,date:o.makeNotionPageDate(p),name:r.getNotionNameProperty(e).title[0].text.content})}else s.delete_pages.push({id:e.id})}else s.create_events.push(Object.assign({page_id:e.id,description:o.makeEventDescription(e),summary:r.getNotionNameProperty(e).title[0].text.content},o.makeCalendarEventDate(e)))}for(const[e,t]of Array.from(l))s.delete_events.push({id:t.id});for(const e of Array.from(d))s.create_pages.push({name:e.summary,gcal_id:e.id,gcal_id_property_name:t.NOTION_GCAL_ID_PROPERTY_NAME,event_description:e.description||\"\",date_property_name:t.NOTION_DATE_PROPERTY_NAME,date:o.makeNotionPageDate(e)});return[{json:s}]}})(),a)this[r]=a[r];a.__esModule&&Object.defineProperty(this,\"__esModule\",{value:!0})})();return main(items)\n\n"
      },
      "name": "Action Maker",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        950,
        730
      ]
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"delete_pages\";\nconst params = items[0].json[KEY];\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Delete Pages",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        1100
      ],
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"delete_events\";\nconst params = items[0].json[KEY];\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Delete Events",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        1280
      ]
    },
    {
      "parameters": {
        "calendar": "rigfejc1f335t8q0m6bepi04e0@group.calendar.google.com",
        "start": "={{$json[\"date\"][\"start\"]}}",
        "end": "={{$json[\"date\"][\"end\"]}}",
        "additionalFields": {
          "allday": "={{$json[\"date\"][\"is_all_day\"]}}",
          "description": "={{$json[\"description\"]}}",
          "summary": "={{$json[\"summary\"]}}"
        }
      },
      "name": "Create Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1350,
        350
      ],
      "credentials": {
        "googleCalendarOAuth2Api": "Google Calendar OAuth2 API"
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": "={{$json[\"id\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "={{$json[\"date_property_name\"]}}|date",
              "allday": "={{$json[\"date\"][\"is_all_day\"]}}",
              "timezone": "={{$json[\"date\"][\"timezone\"]}}",
              "date": "={{$json[\"date\"][\"start\"]}}"
            }
          ]
        }
      },
      "name": "Update Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1550,
        500
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update"
      },
      "name": "Delete Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1350,
        990
      ],
      "credentials": {
        "notionApi": "Notion API key"
      },
      "disabled": true
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"create_pages\";\nconst params = items[0].json[KEY];\n\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    this.getWorkflowStaticData(\"global\")[KEY] = result;\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Create Pages",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        200
      ]
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"update_pages\";\nconst params = items[0].json[KEY];\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Update Pages",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        750
      ]
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"update_events\";\nconst params = items[0].json[KEY];\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Update Events",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        920
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": "rigfejc1f335t8q0m6bepi04e0@group.calendar.google.com",
        "eventId": "={{$json[\"gcal_id\"]}}",
        "updateFields": {
          "description": "={{$json[\"description\"]}}",
          "summary": "={{$json[\"name\"]}}"
        }
      },
      "name": "Update Description",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1950,
        100
      ],
      "credentials": {
        "googleCalendarOAuth2Api": "Google Calendar OAuth2 API"
      }
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"create_pages\";\nconst data = this.getWorkflowStaticData(\"global\")[KEY];\nthis.getWorkflowStaticData(\"global\")[KEY] = undefined;\n\nreturn [{\n    json: {\n        name: data.name,\n        gcal_id: data.gcal_id,\n        description: 'NOTION_ID: '+ items[0].json.id + '\\nhttps://notion.so/' + items[0].json.id.replace(/-/g,\"\") + '\\n' + data.event_description,\n    }\n}];\n"
      },
      "name": "Add Notion Id In Event",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1750,
        100
      ]
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": "={{$node[\"Get Notion \"].parameter[\"databaseId\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "={{$json[\"date_property_name\"]}}|date",
              "range": true,
              "timezone": "={{$json[\"date\"][\"timezone\"]}}",
              "dateStart": "={{$json[\"date\"][\"start\"]}}",
              "dateEnd": "={{$json[\"date\"][\"end\"]}}"
            },
            {
              "key": "={{$json[\"gcal_id_property_name\"]}}|rich_text",
              "textContent": "={{$json[\"gcal_id\"]}}"
            },
            {
              "key": "Name|title",
              "title": "={{$json[\"name\"]}}"
            }
          ]
        },
        "blockUi": {
          "blockValues": []
        }
      },
      "name": "Create Page Range Date",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1550,
        100
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "databaseId": "={{$node[\"Get Notion \"].parameter[\"databaseId\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "={{$json[\"date_property_name\"]}}|date",
              "allday": "={{$json[\"date\"][\"is_all_day\"]}}",
              "timezone": "={{$json[\"date\"][\"timezone\"]}}",
              "date": "=2021-06-03"
            },
            {
              "key": "={{$json[\"gcal_id_property_name\"]}}|rich_text",
              "textContent": "={{$json[\"gcal_id\"]}}"
            },
            {
              "key": "Name|title",
              "title": "={{$json[\"name\"]}}"
            }
          ]
        },
        "blockUi": {
          "blockValues": []
        }
      },
      "name": "Create Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1550,
        -80
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"create_events\";\n\nconst params = items[0].json[KEY];\n\nconst staticData = this.getWorkflowStaticData(\"node\");\n\nlet pages;\nif (params) {\n    pages = params;\n} else {\n    pages = staticData[KEY];\n}\n\nif (pages.length > 0) {\n    const result = pages.pop();\n    this.getWorkflowStaticData(\"global\")[KEY] = result;\n    staticData[KEY] = pages;\n\n    return [{ json: result }];\n} else {\n    return [];\n}\n"
      },
      "name": "Loop Create Events",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1150,
        450
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json[\"date\"][\"end\"]}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "name": "IF Range Page",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1350,
        100
      ]
    },
    {
      "parameters": {
        "functionCode": "const KEY = \"create_events\";\n\nconst data = this.getWorkflowStaticData(\"global\")[KEY];\nthis.getWorkflowStaticData(\"global\")[KEY] = undefined;\n\nreturn [{\n    json: {\n        id: data.page_id,\n        gcal_id: items[0].json.id,\n    }\n}];\n"
      },
      "name": "Add Event Id In Page",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        1550,
        350
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [
            {
              "value1": "={{$json[\"date\"][\"end\"]}}",
              "operation": "isEmpty"
            }
          ]
        }
      },
      "name": "IF Range Page1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        1350,
        650
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": "rigfejc1f335t8q0m6bepi04e0@group.calendar.google.com",
        "eventId": "={{$json[\"id\"]}}",
        "updateFields": {
          "allday": "={{$json[\"date\"][\"is_all_day\"]}}",
          "end": "={{$json[\"date\"][\"end\"]}}",
          "start": "={{$json[\"date\"][\"start\"]}}",
          "timezone": "={{$json[\"date\"][\"timezone\"]}}"
        }
      },
      "name": "Update Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1350,
        810
      ],
      "credentials": {
        "googleCalendarOAuth2Api": "Google Calendar OAuth2 API"
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": "={{$json[\"id\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "={{$json[\"gcal_id_property_name\"]}}|rich_text",
              "textContent": "={{$json[\"gcal_id\"]}}"
            }
          ]
        }
      },
      "name": "Add GCal Id in Page",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1750,
        350
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "resource": "databasePage",
        "operation": "update",
        "pageId": "={{$json[\"id\"]}}",
        "propertiesUi": {
          "propertyValues": [
            {
              "key": "={{$json[\"date_property_name\"]}}|date",
              "range": true,
              "allday": "={{$json[\"date\"][\"is_all_day\"]}}",
              "timezone": "={{$json[\"date\"][\"timezone\"]}}",
              "dateStart": "={{$json[\"date\"][\"start\"]}}",
              "dateEnd": "={{$json[\"date\"][\"end\"]}}"
            }
          ]
        }
      },
      "name": "Update Page Range Date",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 1,
      "position": [
        1550,
        650
      ],
      "credentials": {
        "notionApi": "Notion API key"
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "calendar": "rigfejc1f335t8q0m6bepi04e0@group.calendar.google.com",
        "eventId": "={{$json[\"id\"]}}",
        "options": {}
      },
      "name": "Delete Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        1350,
        1180
      ],
      "credentials": {
        "googleCalendarOAuth2Api": "Google Calendar OAuth2 API"
      }
    },
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "mode": "everyX",
              "value": 20,
              "unit": "minutes"
            }
          ]
        }
      },
      "name": "Interval",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        50,
        880
      ]
    },
    {
      "parameters": {
        "operation": "getAll",
        "calendar": "rigfejc1f335t8q0m6bepi04e0@group.calendar.google.com",
        "returnAll": true,
        "options": {}
      },
      "name": "Get Calendar",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1,
      "position": [
        400,
        640
      ],
      "credentials": {
        "googleCalendarOAuth2Api": "Google Calendar OAuth2 API"
      }
    },
    {
      "parameters": {
        "keepOnlySet": true,
        "values": {
          "string": [
            {
              "name": "add to notion mark in gcal",
              "value": "notion:,notion :,Notion:,Notion :,notion:,notion :,Notion:,Notion :"
            },
            {
              "name": "notion mark in gcal",
              "value": "NOTION_ID: "
            },
            {
              "name": "gcal id property in notion",
              "value": "GCal Id"
            },
            {
              "name": "notion date property",
              "value": "Start-End Time"
            },
            {
              "name": "time zone",
              "value": "Asia/Seoul"
            }
          ],
          "number": [
            {
              "name": "default calendar range(min)",
              "value": 30
            }
          ]
        },
        "options": {}
      },
      "name": "Set Environments",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        400,
        470
      ]
    }
  ],
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Get Notion ",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Calendar",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Notion ": {
      "main": [
        [
          {
            "node": "Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map ": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Map": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Action Maker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Action Maker": {
      "main": [
        [
          {
            "node": "Loop Update Pages",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Update Events",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Delete Events",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Create Pages",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop Create Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page": {
      "main": [
        [
          {
            "node": "Loop Update Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Delete Pages": {
      "main": [
        [
          {
            "node": "Delete Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Page": {
      "main": [
        [
          {
            "node": "Loop Delete Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Create Pages": {
      "main": [
        [
          {
            "node": "IF Range Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Update Pages": {
      "main": [
        [
          {
            "node": "IF Range Page1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Notion Id In Event": {
      "main": [
        [
          {
            "node": "Update Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "main": [
        [
          {
            "node": "Add Event Id In Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Page Range Date": {
      "main": [
        [
          {
            "node": "Add Notion Id In Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Page": {
      "main": [
        [
          {
            "node": "Add Notion Id In Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Description": {
      "main": [
        [
          {
            "node": "Loop Create Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Create Events": {
      "main": [
        [
          {
            "node": "Create Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Range Page": {
      "main": [
        [
          {
            "node": "Create Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Page Range Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add Event Id In Page": {
      "main": [
        [
          {
            "node": "Add GCal Id in Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Range Page1": {
      "main": [
        [
          {
            "node": "Update Page",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Page Range Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Update Events": {
      "main": [
        [
          {
            "node": "Update Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "main": [
        [
          {
            "node": "Loop Update Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Delete Events": {
      "main": [
        [
          {
            "node": "Delete Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add GCal Id in Page": {
      "main": [
        [
          {
            "node": "Loop Create Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Page Range Date": {
      "main": [
        [
          {
            "node": "Loop Update Pages",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Interval": {
      "main": [
        [
          {
            "node": "Get Calendar",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get Notion ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Calendar": {
      "main": [
        [
          {
            "node": "Map ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Event": {
      "main": [
        [
          {
            "node": "Loop Delete Events",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Environments": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {},
  "id": "4"
}